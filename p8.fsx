(*
Largest product in a series
Problem 8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

*)

open System
open Checked                            //32 bit ints overflowed!!

let numstring = "73167176531330624919225119674426574742355349194934
                 96983520312774506326239578318016984801869478851843
                 85861560789112949495459501737958331952853208805511
                 12540698747158523863050715693290963295227443043557
                 66896648950445244523161731856403098711121722383113
                 62229893423380308135336276614282806444486645238749
                 30358907296290491560440772390713810515859307960866
                 70172427121883998797908792274921901699720888093776
                 65727333001053367881220235421809751254540594752243
                 52584907711670556013604839586446706324415722155397
                 53697817977846174064955149290862569321978468622482
                 83972241375657056057490261407972968652414535100474
                 82166370484403199890008895243450658541227588666881
                 16427171479924442928230863465674813919123162824586
                 17866458359124566529476545682848912883142607690042
                 24219022671055626321111109370544217506941658960408
                 07198403850962455444362981230987879927244284909188
                 84580156166097919133875499200524063689912560717606
                 05886116467109405077541002256983155200055935729725
                 71636269561882670428252483600823257530420752963450"


// Get rid of newlines and spaces and other junk, also converts string to sequence
let onlydigits (s:string) = seq { for c in s do yield c} |> Seq.filter System.Char.IsDigit
// Convert the charactesr to ints. Not sure why I have to conver the charactesr to strings
let digits s = s |> onlydigits |> Seq.map (System.Int64.Parse << string)

// Converst to digits, uses windows to make groups of N
// Then each of the groups we compute the product and then get the max
let greatestwindowedproduct n s =
    let windoweddigits = s |> digits |> Seq.windowed n
    seq { for s in windoweddigits do yield Seq.fold ( * ) 1L s } |> (Seq.fold max 0L)

printfn "Check: %d" (greatestwindowedproduct 4 numstring)
printfn "Answer: %d" (greatestwindowedproduct 13 numstring)

(* This answer took way longer than it looks for me. I wrote many many
   longer intermediate functions and then colapsed them into the three
   functions written above

   I wanted to do something other than use System.Int32.Parse but I could not come up with something clever.

   I wish greatestwindowedproduct was nicer and didnt require the let
   inside. Mostly I think the seq comprehension with the yeild can be
   removed to be nicer *)
